set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2" )

CMakeList 는 -00, -01, -02, -03, -0s 등의 옵션을 가질수있다.
이 옵션들은 컴파일러가 소스 코드를 기계어로 변환할 때 최적화 작업의 정도를 나타내며 대부분의 컴파일러는 다양한 최적화 레벨(-00, -01, -02, -03, -0s )을 제공하며 
이 레벨에 따라서 컴파일러는 코드의 실행속도, 메모리 사용량 그리고 컴파일 시간 사이의 균형을 다르게 조절

-00(최적화 없음) : 최적화를 전혀 수행하지 않는다. 이 레벨에서는 빠른 컴파일 시간을 위해 코드의 원래구조를 최대한 유지하며 디버깅이 용이하지만 실행속도가 가장 느리다.
-01(기본 최적화) : 컴파일 시간과 실행 시간 사이의 균형을 제공
-02(고급 최적화) : 더 고급 최적화를 수행하여 실행 속도를 향상시킨다. '-02 는 -01' 보다 더 많은 최적화 기법을 적용하며 코드의 실행 속도를 중시할 때 자주 사용한다. '-02'는 대부분의 경우 안전하고 효과적인 최적화 레벨
-03(매우 고급 최적화) : 가장 많은 최적화를 수행하며 실행 파일의 크기가 증가하거나 특정 시스템에서는 예상하지 못한 문제를 일으킬 수 있으나 " 프로그램의 실행속도가 상당히 향상될수있다."
-0s(크기 최적화) : 실행 파일ㅢ 크기를 줄이는데 중점을 두며 임베디드 시스템이나 메모리에 제약이 있는 환경에서 유용하다. 

디버깅 옵션
-g: 디버깅 정보를 포함하여 컴파일합니다. 디버거에서 사용됩니다.
-ggdb: GDB(GNU Debugger)를 위한 풍부한 디버깅 정보를 생성합니다.

경고 옵션
-Wall: 모든 경고 메시지를 활성화합니다.
-Wextra: -Wall에 포함되지 않은 추가 경고를 활성화합니다.
-Werror: 모든 경고를 오류로 취급하여, 경고가 있을 경우 컴파일을 실패하게 합니다.

언어 옵션
-std=c++11, -std=c++14, -std=c++17, -std=c++20: C++ 언어의 특정 표준 버전을 선택합니다.
-언어옵션의 default 값은 그 컴파일러에 따라서 다름(gcc 의 버전에 따라)

링크 옵션
-l: 특정 라이브러리를 링크합니다. 예를 들어, -lm은 수학 라이브러리(math library)를 링크합니다.
-L: 라이브러리 파일을 찾을 디렉토리를 지정합니다. 
ex) gcc myprogram.c -L/home/user/mylibs -lm -lpthread -o myprogram   (-L 뒤에는 해당하는 라이브러리를, -lm 은 math, -lpthread 는 멀티뜨레드를 이용하기 위한 라이브러리)





컴파일러 종류
많이 사용하는건 GCC 와 clang 이 있다. 

GCC(GNU complier collection)
- GCC는 GNU 프로젝트의 일부로 개발되었으며 C,C++, Objective-C, Fortran, Ada, Go 등의 언어를 지원한다. 
- 오픈소스이며 다양한 운영 체제와 아키텍처에서 사용할 수 있음(임베디드에는 아마 GCC 밖에 없는듯하다)
- 다양한 최적화 옵션과 기능을 제공하며 경우에 따라 코드의 크기가 크고 컴파일속도가 느리지만 최적화된 코드의 실행속도는 매우 뛰어나다(실행파일의 최적화가 잘되어 속도가 빠름)

clang
-clang은 LLVM 프로젝트의 일부이며 주로 C, C++, Objective-C의 ㅓㅁ파일러 프론트 엔드로 사용된다. 
- 2000년대 중반부터 개발되어 GCC의 대안으로 자리잡음 
- 오류메세지의 명확성과 사용자 친화성에 중점을 두고 있다. 
- 컴파일 속도가 GCC보다 일반적으로 빠르며 메모리 사용량도 적다.


Clang 대신에 GCC 를 사용하는이유
- GCC는 특히 고급 최적화 기법에서 장점을 가진다. 복잡한 최적화를 통해 생성된 코드는 실행 시간이 매우 짧을 수 있으며 성능이 매우 중요한 어플리케이션에서는 GCC가 더 나은선택
- 언어 지원의 종류가 Clang 보다 더 넓다
- ** GCC는 광범위한 플래폼과 아키텍처를 지원하기 때문에 일부 특수한 임베디드 시스템에서는 GCC가 유일한 지원 컴파일러일 수 있다. 
- 많은 오픈소스들은 GCC를 기준으로 개발되어 이러한 프로젝트와 호환성을 유지하려면 GCC를 사용하는 것이 좋을 수 있다. 


GCC 대신 Clang 을 사용하는 이유 
- 컴파일 속도가 GCC에 비해 빠르다. 이는 큰 프로젝트나 반복적인 개발 및 테스트 사이클에서 상당한 시간 절약을 의미함
- 컴파일에 사용되는 메모리의 크기가 GCC에 비해 적은 메모리를 사용하는 경향이 있다.(물론 컴파일의 최적화 레벨에 따라 다름)
- 오류메세지가 GCC에 비해 더 명확하고 이해하기 쉬움 
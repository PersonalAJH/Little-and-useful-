그리드 기반 알고리즘 
- A star(A*) 알고리즘 :  휴리스틱을 기반으로 작동한다. 이 휴리스틱은 목표 노드에 도달하는데 예상 비용을 추정하는것을 말하며
                        알고리즘은 각 단계에서 총비용 f(n) = g(n) + h(n)을 최소화하는 노드를 선택한다. 여기서 g(n)은 시작 노드로 부터 현재 노드까지의 실제비용이며
                        h(n)은 현재 노드에서 목적지 까지의 추정비용(이걸 휴리스틱이라고 하며 이 비용은 그리드에 따라서 다르겠지만 보통 거리로 재기 떄문에 그... d^2 = x^2 + y^2 으로 하거나 그리드의 길이로 하는 경우도 있음)입니다. 
                        A* 는 효율적이고 정확한 경로를 찾을 수 있다. 휴리스틱이 적절하게 선택되면 A*는 최적경로를 보장한다. 
                        A* 알고리즘은 보통 정적인 환경(환경이 변하지 않거나 매우 적은 이미 정해진 그런 환경에서 많이 사용한다) 또한 그리드 또는 그래프 기반, 예측 가능한 환경에서 사용된다.

- Dijkstra 알고리즘 : 각 노드에서 최단거리를 기록하며 아직 방문하지 않은 노드 중에서 최소 거리를 가진 노드들을 선택하여 그 이웃 노드들을 방문한다. 
                        보통은 A* 알고리즘이 이 Dijkstradk알고리즘을 개선한 버전이기 떄문에 보통은 더 최적의 경로를 찾아서 그냥 이론만 알고있고 안쓰는게 낫다.
                        https://youtu.be/RYdBcnSiwag?si=1mYl_xonRgJ-Cs5c 를 참고하면 어떤 차이인지 확인 가능(경우에 따라서 디익스트라가 나을? 수? 도 있지만 거의 비슷하며 거의 모든 경우에 A*가 우위 혹은 비슷)



샘플링 기반 알고리즘
- RRT(Rapidly exploring random tree) :  시작점에서 시작하여 무작위로 공간을 샘플링하고, 가장 가까운 트리 노드에서 새로운 샘플로 확장하여 트리를 구축합니다.
                                        이 과정은 목표 지점에 도달하거나 충분한 탐색이 이루어질 때까지 반복된다. RRT 는 환경의 장애물을 고려하여 트리를 확장한다(알고리즘을 확인 했을 때 장애물이 있으면 그 지점을 fail 시킴)
                                        RRT 는 동적이거나 예측할 수 없는 환경, 고차원 공간에서 효율적이며 로봇팔의 경로 계획이나 복잡한 환경에서의 자율 주행차 경로 계획등에 적합하다. 
                                        실시간 응답에 적합하지만 최적의 경로를 찾는 것에은 아님

- PRM(Probablitisc ROadmap MEthod) : PRM은 먼저 환경 전체에 걸쳐 임의의 점들을 샘플링한다. 이 점들 간에 가능한 경로를 연결하여 로드맵을 생성하고 이 로드맵이 시작점과 목적지를 연결하는 경로를 찾는데 사용한다.
                                        PRM 은 정적 환경에서 사용되며 한 번 구축된 로드맵은 여러번의 경로 계획에 재사용 될 수 있다. 
                                        대규모 환경에 효과적이며 미리 계산된 길을 여러번 사용할 수 있는 장점이 있다. 
                                        RRT에 비해서 대규모 또는 복잡한 정적 환경에서 더 효과적이지만 실시간 응답이 필요하거나 환경이 동적인 경우에는 RRT가 적합하다. 
                                        PRM 은 RRT에 비해서 더 최적화된 경로를 찾는데 유리할 수 있지만 시간이 오래걸림

동적 환경을 위한 알고리즘
- D star (D*) 알고리즘 : D* 알고리즘은 본질적으로 A* 알고리즘의 동적 버전이며 작동원리는 A* 와 유사하게 시작 지점과 목표 지점 사이의 최단 경로를 찾지만 환경의 변화를 실시간으로 고려할 수 있다.
                        환경에 변화가 감지되면 D* 알고리즘은 변경된 환경에 맞춰 경로를 업데이트 한다. 이 알고리즘은 재귀적으로 경로를 업데이트하며 이미 탐색한 영역을 재 탐색하지 않는 것이 특징
                        D*는 로봇이나 자율주행 차량이 동적 환경을 탐색할 때 유용하다. 실시간으로 경로를 업데이트 할 수 있으며 효율적인 경로 재계산을 제공

- FMT(Fast Marching Tree) 알고리즘 : FMT 는 RRT의 한 변경으로 고차원적인 복작한 환경에서 더 효율적인 경로 탐색을 제공한다. FMT는 RRT 에 비해서 최소 비용 경로를 찾는것에 중점을 두며
                                    보다 효율적인 샘플링 전략을 사용하며 경로 계획의 속도와 품질을 개선한다. 
                                    FMT 의 핵심 아이디어는 경로 계획의 효율성과 최적성을 개선하기 위한 샘플링 과정을 관리하는 것이며 
                                    밀도 기반 샘플링(다양한 영역에 걸쳐 균일하게 분포된 샘플링 생성), 비용기반선택(생성된 샘플중에서 비용이 낮은 샘플을 "우선" 선택), 효율적인 트리확장(새로운 샘플을 기존 트리에 추가할 때 기존 노드들과의 연결을 최적화),
                                    동적 탐색변경(탐색 공간의 크기와 샘플 수 에 따라 적응적으로 탐색 반경을 조정-> 너무 빡빡하게 확장하는 걸 방지함으로 써 효율성을 증가) 의 특징을 가짐으로 
                                    로봇팔이나 자율주행차량과 같은 고도의 정밀성을 요구하는 분야에 유용하게 사용